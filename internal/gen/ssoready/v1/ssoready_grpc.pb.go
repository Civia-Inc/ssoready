// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: ssoready/v1/ssoready.proto

package ssoreadyv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SSOReadyService_RedeemSAMLAccessToken_FullMethodName = "/ssoready.v1.SSOReadyService/RedeemSAMLAccessToken"
)

// SSOReadyServiceClient is the client API for SSOReadyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SSOReadyServiceClient interface {
	RedeemSAMLAccessToken(ctx context.Context, in *RedeemSAMLAccessTokenRequest, opts ...grpc.CallOption) (*RedeemSAMLAccessTokenResponse, error)
}

type sSOReadyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSSOReadyServiceClient(cc grpc.ClientConnInterface) SSOReadyServiceClient {
	return &sSOReadyServiceClient{cc}
}

func (c *sSOReadyServiceClient) RedeemSAMLAccessToken(ctx context.Context, in *RedeemSAMLAccessTokenRequest, opts ...grpc.CallOption) (*RedeemSAMLAccessTokenResponse, error) {
	out := new(RedeemSAMLAccessTokenResponse)
	err := c.cc.Invoke(ctx, SSOReadyService_RedeemSAMLAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SSOReadyServiceServer is the server API for SSOReadyService service.
// All implementations must embed UnimplementedSSOReadyServiceServer
// for forward compatibility
type SSOReadyServiceServer interface {
	RedeemSAMLAccessToken(context.Context, *RedeemSAMLAccessTokenRequest) (*RedeemSAMLAccessTokenResponse, error)
	mustEmbedUnimplementedSSOReadyServiceServer()
}

// UnimplementedSSOReadyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSSOReadyServiceServer struct {
}

func (UnimplementedSSOReadyServiceServer) RedeemSAMLAccessToken(context.Context, *RedeemSAMLAccessTokenRequest) (*RedeemSAMLAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemSAMLAccessToken not implemented")
}
func (UnimplementedSSOReadyServiceServer) mustEmbedUnimplementedSSOReadyServiceServer() {}

// UnsafeSSOReadyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SSOReadyServiceServer will
// result in compilation errors.
type UnsafeSSOReadyServiceServer interface {
	mustEmbedUnimplementedSSOReadyServiceServer()
}

func RegisterSSOReadyServiceServer(s grpc.ServiceRegistrar, srv SSOReadyServiceServer) {
	s.RegisterService(&SSOReadyService_ServiceDesc, srv)
}

func _SSOReadyService_RedeemSAMLAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedeemSAMLAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOReadyServiceServer).RedeemSAMLAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOReadyService_RedeemSAMLAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOReadyServiceServer).RedeemSAMLAccessToken(ctx, req.(*RedeemSAMLAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SSOReadyService_ServiceDesc is the grpc.ServiceDesc for SSOReadyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SSOReadyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ssoready.v1.SSOReadyService",
	HandlerType: (*SSOReadyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RedeemSAMLAccessToken",
			Handler:    _SSOReadyService_RedeemSAMLAccessToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ssoready/v1/ssoready.proto",
}
