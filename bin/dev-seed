#!/bin/bash
set -e

# Load environment variables
if [ ! -f .env ]; then
    echo "❌ .env file not found!"
    echo ""
    echo "Please run the setup script first:"
    echo "  ./bin/dev-setup"
    exit 1
fi

source .env

echo "🌱 Seeding development database..."
echo ""

# Hardcoded list of development users
# Add more users here as needed
declare -a USERS=(
    "gdavis@govai.com|Gareth Davis"
)

# Create shared app organization
APP_ORG_ID=$(uuidgen | tr '[:upper:]' '[:lower:]')

echo "Creating app organization..."
docker compose exec -T postgres psql -U postgres << EOF
INSERT INTO app_organizations (id)
VALUES ('$APP_ORG_ID')
ON CONFLICT DO NOTHING;
EOF

echo ""
echo "Creating users..."
echo ""

# Track session tokens for output
declare -a SESSION_TOKENS=()

for user_entry in "${USERS[@]}"; do
    IFS='|' read -r EMAIL DISPLAY_NAME <<< "$user_entry"

    APP_USER_ID=$(uuidgen | tr '[:upper:]' '[:lower:]')
    SESSION_ID=$(uuidgen | tr '[:upper:]' '[:lower:]')

    # Generate a session token (32 random bytes as hex)
    SESSION_TOKEN=$(openssl rand -hex 32)
    SESSION_TOKEN_SHA256=$(echo -n "$SESSION_TOKEN" | xxd -r -p | openssl dgst -sha256 -binary | xxd -p -c 256)

    echo "  → Creating user: $EMAIL ($DISPLAY_NAME)"

    # Insert user and session
    docker compose exec -T postgres psql -U postgres << EOF > /dev/null
-- Create app user
INSERT INTO app_users (id, app_organization_id, display_name, email)
VALUES ('$APP_USER_ID', '$APP_ORG_ID', '$DISPLAY_NAME', '$EMAIL')
ON CONFLICT (email) DO UPDATE SET display_name = EXCLUDED.display_name;

-- Create a long-lived session (30 days)
INSERT INTO app_sessions (id, app_user_id, create_time, expire_time, token, token_sha256, revoked)
VALUES (
  '$SESSION_ID',
  (SELECT id FROM app_users WHERE email = '$EMAIL'),
  NOW(),
  NOW() + INTERVAL '30 days',
  '',
  decode('$SESSION_TOKEN_SHA256', 'hex'),
  false
);
EOF

    SESSION_TOKENS+=("$EMAIL|$SESSION_TOKEN")
done

echo ""
echo "Creating test environment and organization..."

# Create a test environment
ENV_ID=$(uuidgen | tr '[:upper:]' '[:lower:]')
ORG_ID=$(uuidgen | tr '[:upper:]' '[:lower:]')

docker compose exec -T postgres psql -U postgres << EOF > /dev/null
-- Create environment
INSERT INTO environments (
  id,
  app_organization_id,
  display_name,
  auth_url,
  redirect_url
)
VALUES (
  '$ENV_ID',
  '$APP_ORG_ID',
  'Development Environment',
  'http://localhost:8081',
  'https://civia-app.us-1.sharedwithexpose.com/sso_callback'
)
ON CONFLICT DO NOTHING;

-- Create organization within the environment
INSERT INTO organizations (
  id,
  environment_id,
  display_name,
  external_id
)
VALUES (
  '$ORG_ID',
  '$ENV_ID',
  'GovAI Microsoft',
  '13246'
)
ON CONFLICT DO NOTHING;

-- Add domain to the organization
INSERT INTO organization_domains (
  id,
  organization_id,
  domain
)
VALUES (
  gen_random_uuid(),
  '$ORG_ID',
  'usegovai.onmicrosoft.com'
)
ON CONFLICT DO NOTHING;
EOF

echo "  → Environment ID: env_$(echo $ENV_ID | tr -d '-')"
echo "  → Organization ID: org_$(echo $ORG_ID | tr -d '-')"

# Create admin access token for the test organization
ADMIN_TOKEN_ID=$(uuidgen | tr '[:upper:]' '[:lower:]')
ADMIN_TOKEN=$(openssl rand -hex 32)
ADMIN_TOKEN_SHA256=$(echo -n "$ADMIN_TOKEN" | xxd -r -p | openssl dgst -sha256 -binary | xxd -p -c 256)

echo ""
echo "Creating admin access token..."

docker compose exec -T postgres psql -U postgres << EOF > /dev/null
-- Create admin access token
INSERT INTO admin_access_tokens (
  id,
  organization_id,
  access_token_sha256,
  create_time,
  expire_time,
  can_manage_saml,
  can_manage_scim
)
VALUES (
  '$ADMIN_TOKEN_ID',
  '$ORG_ID',
  decode('$ADMIN_TOKEN_SHA256', 'hex'),
  NOW(),
  NOW() + INTERVAL '30 days',
  true,
  true
)
ON CONFLICT DO NOTHING;
EOF

echo "  → Admin token created"

echo ""
echo "✅ Database seeded successfully!"
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "                        DEVELOPMENT TOKENS                         "
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "📱 APP SESSION TOKENS (for SaaS Developer UI)"
echo "   Use these to log into http://localhost:8082"
echo ""

for token_entry in "${SESSION_TOKENS[@]}"; do
    IFS='|' read -r EMAIL SESSION_TOKEN <<< "$token_entry"
    echo "   User:  $EMAIL"
    echo "   Token: $SESSION_TOKEN"
    echo ""
done

echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "🔧 ADMIN ACCESS TOKEN (for Customer Self-Service UI)"
echo "   Use this to log into http://localhost:8083"
echo ""
echo "   Organization: Test Customer Organization"
echo "   Token:        $ADMIN_TOKEN"
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "HOW TO LOG IN:"
echo ""
echo "For App UI (port 8082) - Developer experience:"
echo "  1. Visit http://localhost:8082"
echo "  2. Open Developer Tools (F12) → Console"
echo "  3. Run: localStorage.setItem('s', 'YOUR_APP_TOKEN_HERE')"
echo "  4. Refresh the page"
echo ""
echo "For Admin UI (port 8083) - Customer experience:"
echo "  1. Visit http://localhost:8083"
echo "  2. Open Developer Tools (F12) → Console"
echo "  3. Run: localStorage.setItem('s', 'YOUR_ADMIN_TOKEN_HERE')"
echo "  4. Refresh the page"
echo ""
echo "All sessions expire in 30 days."
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
