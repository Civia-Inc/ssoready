#!/bin/bash
set -e

echo "üöÄ Starting SSOReady Development Environment"
echo "============================================="
echo ""

# Check if .env exists
if [ ! -f .env ]; then
    echo "‚ùå .env file not found!"
    echo ""
    echo "Please run the setup script first:"
    echo "  ./bin/dev-setup"
    exit 1
fi

# Check if postgres data directory exists
if [ ! -d .postgres ]; then
    echo "‚ö†Ô∏è  PostgreSQL data directory not found."
    echo ""
    echo "It looks like this is your first time running SSOReady."
    echo "Please run the setup script first:"
    echo "  ./bin/dev-setup"
    exit 1
fi

echo "üîß Syncing environment files..."
# Sync root .env to frontend directories to ensure consistency
cp .env admin/.env
cp .env app/.env
echo "‚úÖ Environment files synced"
echo ""

# Check if services are already running
if docker compose ps --services --filter "status=running" | grep -q .; then
    echo "‚ö†Ô∏è  Services are already running!"
    echo ""
    echo "If you've made changes, you may need to:"
    echo "  - Code changes (React): Already hot-reloading ‚úì"
    echo "  - Code changes (Go): Run 'docker compose up -d --build api auth'"
    echo "  - .env changes: Run 'docker compose down' first, then re-run this script"
    echo "  - Dockerfile/compose.yaml: Run 'docker compose down' first, then re-run"
    echo ""
    read -p "Continue and attach to logs? (y/N) " -n 1 -r
    echo ""
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 0
    fi
fi

echo "üîß Starting all services..."
echo ""
echo "This will start:"
echo "  - PostgreSQL database"
echo "  - API service (Go)"
echo "  - Auth service (Go)"
echo "  - Admin UI (React)"
echo "  - Self-Serve UI (React)"
echo ""
echo "Press Ctrl+C to stop all services"
echo ""

# Give it a moment for the message to be read
sleep 2

# Start all services
docker compose up

echo ""
echo "üëã All services stopped"
