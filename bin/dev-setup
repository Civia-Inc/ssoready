#!/bin/bash
set -e

echo "üöÄ SSOReady Local Development Setup"
echo "===================================="
echo ""

# Check for required tools
echo "üìã Checking prerequisites..."

if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker is not installed. Please install Docker Desktop from https://www.docker.com/products/docker-desktop"
    exit 1
fi
echo "‚úÖ Docker is installed"

if ! docker compose version &> /dev/null; then
    echo "‚ùå docker compose is not available. Please install Docker Desktop or Docker with Compose plugin"
    exit 1
fi
echo "‚úÖ docker compose is installed"

if ! command -v node &> /dev/null; then
    echo "‚ùå Node.js is not installed. Please install Node.js 18+ from https://nodejs.org/"
    exit 1
fi
NODE_VERSION=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)
if [ "$NODE_VERSION" -lt 18 ]; then
    echo "‚ùå Node.js version $NODE_VERSION is too old. Please install Node.js 18 or higher."
    exit 1
fi
echo "‚úÖ Node.js $(node -v) is installed"

if ! command -v go &> /dev/null; then
    echo "‚ùå Go is not installed. Please install Go 1.21+ from https://golang.org/dl/"
    exit 1
fi
echo "‚úÖ Go $(go version | awk '{print $3}') is installed"

echo ""
echo "üìÑ Setting up environment variables..."

# Create .env file if it doesn't exist
if [ ! -f .env ]; then
    if [ -f .env.example ]; then
        cp .env.example .env
        echo "‚úÖ Created .env file from .env.example"
    else
        echo "‚ùå .env.example file not found!"
        exit 1
    fi
else
    echo "‚úÖ .env file already exists"
fi

# Sync .env to frontend directories (they need local copies for Docker builds)
echo "  ‚Üí Syncing .env to admin/ and app/ directories..."
cp .env admin/.env
cp .env app/.env
echo "‚úÖ Environment files synced"

echo ""
echo "üì¶ Installing npm dependencies..."

echo "  ‚Üí Installing admin dependencies..."
cd admin
npm ci
cd ..

echo "  ‚Üí Installing app dependencies..."
cd app
npm ci
cd ..

echo "‚úÖ npm dependencies installed"

echo ""
echo "üêò Starting PostgreSQL..."

# Start only postgres
docker compose up -d postgres

# Wait for postgres to be healthy
echo "  ‚Üí Waiting for PostgreSQL to be ready..."
for i in {1..30}; do
    if docker compose exec -T postgres pg_isready -U postgres > /dev/null 2>&1; then
        echo "‚úÖ PostgreSQL is ready"
        break
    fi
    if [ $i -eq 30 ]; then
        echo "‚ùå PostgreSQL failed to start within 30 seconds"
        exit 1
    fi
    sleep 1
done

echo ""
echo "üóÑÔ∏è  Running database migrations..."

# Load .env and run migrations
source .env
docker compose run --rm migrate -d "$DATABASE_URL" up

echo "‚úÖ Database migrations complete"

echo ""
echo "‚ú® Setup complete!"
echo ""
echo "To start all services, run:"
echo "  ./bin/dev-start"
echo ""
echo "Or with docker compose directly:"
echo "  docker compose up"
echo ""
echo "Services will be available at:"
echo "  - API Service:    http://localhost:8080"
echo "  - Auth Service:   http://localhost:8081"
echo "  - Admin UI:       http://localhost:8083"
echo "  - Self-Serve UI:  http://localhost:8082"
echo "  - PostgreSQL:     localhost:5433"
echo ""
